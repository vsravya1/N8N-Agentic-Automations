{
  "name": "Agentic Vacation Itinerary Planner",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -480,
        -340
      ],
      "id": "2b8b7471-2813-4ea5-b1f9-7749ddd01baa",
      "name": "When chat message received",
      "webhookId": "fd319f07-fc90-4586-80f2-f347ca530b72"
    },
    {
      "parameters": {
        "text": "={{ $json.chatInput }}",
        "schemaType": "fromJson",
        "jsonSchemaExample": "{\n\t\"fromCity\": \n\"newyork\",\n\"toCity\": \n\"seattle\",\n\"startDate\": \n\"2023-12-25\",\n\"endDate\": \n\"2023-12-27\",\n\"travelers\": \n2\n}",
        "options": {
          "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value. Also, look for year in the prompt and use it."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        -260,
        -340
      ],
      "id": "c045b1a6-bccd-471d-8bad-189d0a56836e",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -172,
        -120
      ],
      "id": "d3fdaff7-555b-4e10-a16b-1e98d298f3b5",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "YOsf8InIYk9StIMW",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over all items and safely map city to airport code\nconst cityToAirport = {\n  \"new york\": \"JFK\",\n  \"nyc\": \"JFK\",\n  \"newyork\": \"JFK\",\n  \"seattle\": \"SEA\",\n  \"san francisco\": \"SFO\",\n  \"los angeles\": \"LAX\",\n  \"chicago\": \"ORD\",\n  \"boston\": \"BOS\",\n  \"miami\": \"MIA\",\n  \"atlanta\": \"ATL\"\n};\n\nreturn items.map(item => {\n  const input = item.json.output || {};\n  const fromCity = input.fromCity || '';\n  const toCity = input.toCity || '';\n  const from = typeof fromCity === 'string' ? fromCity.toLowerCase().trim() : '';\n  const to = typeof toCity === 'string' ? toCity.toLowerCase().trim() : '';\n  return {\n    json: {\n      fromCity: input.fromCity,\n      toCity: input.toCity,\n      startDate: input.startDate,\n      endDate: input.endDate,\n      travelers: input.travelers,\n      fromAirport: cityToAirport[from] || from,\n      toAirport: cityToAirport[to] || to\n    }\n  }\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        120,
        -340
      ],
      "id": "10a8d4d5-aa75-4980-a656-81dea0d515da",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "=https://serpapi.com/search.json?engine=google_flights&departure_id={{$json.fromAirport}}&arrival_id={{$json.toAirport}}&outbound_date={{$json.startDate}}&return_date={{$json.endDate}}&api_key={{$vars.SERPAPI_KEY}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        340,
        -540
      ],
      "id": "2fdd7da3-ab94-418d-9fcc-a932c3cbec08",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "url": "=https://serpapi.com/search.json?engine=google_hotels&q=hotels in {{$json.toCity}}&check_in_date={{$json.startDate}}&check_out_date={{$json.endDate}}&api_key={{$vars.SERPAPI_KEY}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        340,
        -340
      ],
      "id": "3c95033e-cc39-41ca-ac89-df23c760aea0",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "url": "=https://serpapi.com/search.json?engine=google&q=top tourist attractions in {{$json.toCity}}&api_key={{$vars.SERPAPI_KEY}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        336,
        -140
      ],
      "id": "9bd0afdb-ea37-469d-b2c6-850c39e04a8b",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        556,
        -340
      ],
      "id": "fca5122f-05e1-4d29-b9f5-7f46a5b67d1a",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Sample fallback values if data is not available\nconst flightPrice = $json[\"Flight Search Agent\"]?.price || 420;\nconst hotelPricePerNight = $json[\"Hotel Search Agent\"]?.price || 200;\nconst days = (new Date($json.endDate) - new Date($json.startDate)) / (1000 * 3600 * 24);\nconst hotelCost = hotelPricePerNight * days;\nconst miscCost = 50 * days;\nconst travelers = $json.travelers || 2;\n\nconst totalCost = (flightPrice * travelers) + hotelCost + miscCost + 92; // 92 = attraction ticket guess\n\nreturn [{\n  json: {\n    flightCost: flightPrice * travelers,\n    hotelCost,\n    miscCost,\n    attractionsCost: 92,\n    totalCost\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        776,
        -265
      ],
      "id": "9ad79599-ea8e-4df6-b1ad-04ca7d198817",
      "name": "Code1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        996,
        -340
      ],
      "id": "44e3401c-6512-4b61-a2b8-942a921b8c15",
      "name": "Merge1"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a travel planning assistant. Your job is to generate a detailed itinerary in Markdown format.\n\nBased on the following data:\n- From: {{ $json.fromCity }}\n- To: {{ $json.toCity }}\n- Travel Dates: {{ $json.startDate }} to {{ $json.endDate }}\n- Airline: {{ $json.flight.airline }} departing on {{ $json.flight.departure }}\n- Hotel: {{ $json.hotel.name }} at ${{ $json.hotel.price }}/night\n- Attractions: {{ $json.attractions.join(\", \") }}\n- Total Estimated Cost: ${{ $json.totalCost }}\n\nPlease generate:\n- A 3-day itinerary with 1â€“2 realistic activities per day\n- Intro and conclusion\n- Travel tips\n- A final cost summary\n\nFormat it in Markdown so it can be shown in a chat app.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1260,
        -340
      ],
      "id": "05100ca9-00d7-4741-80cf-191c451bf1f4",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1300,
        -120
      ],
      "id": "4205a288-47dd-4e99-a0b1-15db71fa242c",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "YOsf8InIYk9StIMW",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1460,
        -120
      ],
      "id": "d8f7663d-6497-40b4-99db-45b7b9782c42",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "jsCode": "const results = $json.best_flights || [];\n\nif (!results.length) {\n  return [{ json: { error: \"No flights found\" } }];\n}\n\n// Sort by price (if available)\nresults.sort((a, b) => {\n  const priceA = a.ticket_price?.amount || 9999;\n  const priceB = b.ticket_price?.amount || 9999;\n  return priceA - priceB;\n});\n\n// Take top 1 or top 3\nconst topFlights = results.slice(0, 3).map((flight, index) => ({\n  index: index + 1,\n  airline: flight.airline || flight.airlines?.[0] || \"Unknown\",\n  departure: flight.departure_time || \"N/A\",\n  return: flight.return_time || \"N/A\",\n  duration: flight.duration || \"N/A\",\n  price: flight.ticket_price?.amount || flight.price || \"N/A\",\n  currency: flight.ticket_price?.currency || \"USD\"\n}));\n\nreturn topFlights.map(f => ({ json: f }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        -540
      ],
      "id": "c4c7039a-a8c2-4304-85e5-8a3a810e6d88",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "const sights = $json.top_sights?.sights || [];\n\n// Sort by highest rating first (descending)\nsights.sort((a, b) => (b.rating || 0) - (a.rating || 0));\n\nconst selected = [];\nlet total = 0;\n\nfor (const sight of sights) {\n  const price = sight.extracted_price;\n\n  if (typeof price !== \"number\") continue;\n\n  if ((total + price) <= 150) {\n    selected.push({\n      name: sight.title,\n      rating: sight.rating,\n      price: price,\n      thumbnail: sight.thumbnail,\n      description: sight.description,\n      reviews: sight.reviews\n    });\n    total += price;\n  }\n\n  if (total >= 150) break;\n}\n\nreturn [{\n  json: {\n    totalAttractionCost: total,\n    selectedAttractions: selected\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        -140
      ],
      "id": "db3a4a75-7a92-4726-bf06-d3f0ca5fc5eb",
      "name": "Code3"
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "triggerCount": 0,
  "meta": {
    "templateCredsSetupCompleted": true
  }
}