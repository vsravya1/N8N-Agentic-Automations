{
  "name": "Personalized Daily news-markdown",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -620,
        30
      ],
      "id": "e4125917-e33f-4f63-a555-a6b69f036732",
      "name": "When chat message received",
      "webhookId": "baf44bb5-0e27-41e3-877f-3b8f9996fbb4"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "apphDRA3cSQnhMcX1",
          "mode": "list",
          "cachedResultName": "Task Manager",
          "cachedResultUrl": "https://airtable.com/apphDRA3cSQnhMcX1"
        },
        "table": {
          "__rl": true,
          "value": "tbl6SqeTXj6T7QzNJ",
          "mode": "list",
          "cachedResultName": "personalized_news",
          "cachedResultUrl": "https://airtable.com/apphDRA3cSQnhMcX1/tbl6SqeTXj6T7QzNJ"
        },
        "filterByFormula": "={Name} = '{{ $json.chatInput }}'",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -400,
        30
      ],
      "id": "ef392dc8-8a30-462b-b728-abdeed0f5e40",
      "name": "Search records",
      "credentials": {
        "airtableTokenApi": {
          "id": "Ss7NWIAfy9NObKcK",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Give a quick weather update for {{$json.location}} as of {{$json.date}}.\n\nCondition: {{$json.condition}}\nTemperature: {{$json.temperature}}\nHumidity: {{$json.humidity}}\nWind: {{$json.wind}}\nChance of rain: {{$json.precipitation}}\n\nWrite this as a short, friendly weather summary. This process will run in the morning and send daily feed to subscriber.\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        480,
        -220
      ],
      "id": "af05aa70-92c2-48e5-9b01-5a9c34477657",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Extract Weather JSON Response1').item.json.location }}{{ $('Extract Weather JSON Response1').item.json.location }}{{ $('Extract Weather JSON Response1').item.json.temperature }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        628,
        0
      ],
      "id": "ae58494a-c0f7-45d3-a05a-8a6514a715ef",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "url": "=https://serpapi.com/search.json?engine=google&q=weather in {{$json.location}}&api_key={{$vars.SERPAPI_KEY}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        40,
        -120
      ],
      "id": "8dd2b0a8-f980-4399-95e8-61bcf3177a2b",
      "name": "Get Weather API"
    },
    {
      "parameters": {
        "jsCode": "const weather = $json.answer_box;\n\nreturn [{\n  json: {\n    location: weather.location,\n    temperature: `${weather.temperature}Â° ${weather.unit}`,\n    condition: weather.weather,\n    date: weather.date,\n    precipitation: weather.precipitation,\n    humidity: weather.humidity,\n    wind: weather.wind\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        -120
      ],
      "id": "95a6f3bf-350a-47db-9b1c-4b17eadd036f",
      "name": "Extract Weather JSON Response1"
    },
    {
      "parameters": {
        "model": "sonar",
        "messages": {
          "message": [
            {
              "content": "=Please provide the latest news and updates as of today related to these topics:\nInterests: {{ $json.interests }}\nStock Interests: {{ $json.stockInterests }}\nSummarize the key recent developments, news headlines, or trends."
            }
          ]
        },
        "options": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.perplexity",
      "typeVersion": 1,
      "position": [
        260,
        180
      ],
      "id": "ef1bc7ea-42b6-4b0d-a0e6-5ed81af340bd",
      "name": "Message a model",
      "credentials": {
        "perplexityApi": {
          "id": "RgMhz2YTDrNvOedd",
          "name": "Perplexity account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Take the following AI-generated content from two sources (`output` and `choices[0].message.content`). Format it using Markdown for Notion use (with proper headings, bullet points, and bold emphasis). \n\nEnsure the **entire result is under 1900 characters**. If necessary, **summarize or truncate less important parts** while keeping the structure readable and informative. \n\nDo **not** include any introductory phrases or explanations in the output.\n\nHere is the original content:  \n1. {{ $json.output }}  \n2. {{ $json.content }}",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1076,
        30
      ],
      "id": "07841bf5-2452-48e3-886f-288c81c6acd1",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": "openai/gpt-4o-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1164,
        250
      ],
      "id": "d46026b4-7596-45c3-8c53-b24c3d0c5085",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "Q9TlL3BJTUOnSXPt",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = [];\n\nfor (const item of $input.all()) {\n  const location = item.json[\"Location\"];  // or item.json.Location\n  items.push({\n    json: {\n      location: location\n    }\n  });\n}\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -180,
        -120
      ],
      "id": "8095f5a0-cf92-4d63-9ae2-c4824a56cecd",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "const items = [];\n\nfor (const item of $input.all()) {\n  items.push({\n    json: {\n      interests: item.json[\"Interests\"],\n      stockInterests: item.json[\"Stock Interests\"]\n    }\n  });\n}\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        40,
        180
      ],
      "id": "60fd39b5-1639-4f88-bc78-17dd90747eb8",
      "name": "Code1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        856,
        30
      ],
      "id": "dc98ac58-51cb-4468-99e6-9462d9f23958",
      "name": "Merge"
    },
    {
      "parameters": {
        "pageId": {
          "__rl": true,
          "value": "https://www.notion.so/sravs-22bd76119aa580e080e7cf2a09d0324e",
          "mode": "url"
        },
        "title": "=DailyNewsFeed-{{ new Date().toISOString().split('T')[0] }}",
        "blockUi": {
          "blockValues": [
            {
              "type": "={{ $json.type }}",
              "textContent": "={{ $json.content }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1892,
        -45
      ],
      "id": "aeb2f7a8-4c1e-43f2-a012-b6d46e8ceaa3",
      "name": "Create a page",
      "credentials": {
        "notionApi": {
          "id": "juW5NjbkWwanMbmr",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-4o-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        508,
        0
      ],
      "id": "0baad6ef-fdc0-4f54-9446-ffdf3c295f79",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "Q9TlL3BJTUOnSXPt",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1672,
        30
      ],
      "id": "6ff19195-8144-4230-af63-aaa6c2a2f113",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "const markdown = $input.first().json.text;\n\nconst lines = markdown.split('\\n');\n\nconst blocks = [];\n\nfor (let line of lines) {\n  line = line.trim();\n  if (!line) continue;\n\n  if (line.startsWith('### ')) {\n    blocks.push({ json: { type: 'heading_3', content: line.slice(4) } });\n  } else if (line.startsWith('## ')) {\n    blocks.push({ json: { type: 'heading_2', content: line.slice(3) } });\n  } else if (line.startsWith('# ')) {\n    blocks.push({ json: { type: 'heading_1', content: line.slice(2) } });\n  } else if (line.startsWith('- ')) {\n    blocks.push({ json: { type: 'bulleted_list_item', content: line.slice(2) } });\n  } else {\n    blocks.push({ json: { type: 'paragraph', content: line } });\n  }\n}\n\nreturn blocks;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1452,
        30
      ],
      "id": "b93af463-2d94-4556-9934-2953ec06be46",
      "name": "Code2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        2112,
        30
      ],
      "id": "eec48c59-578e-4e04-95cb-720ae76b5ffc",
      "name": "Limit"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      content: $input.first().json.choices[0].message.content\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        558,
        180
      ],
      "id": "afb3a79e-a0d1-46b7-95ad-7159e147f98a",
      "name": "Code3"
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Search records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Get Weather API": {
      "main": [
        [
          {
            "node": "Extract Weather JSON Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Weather JSON Response1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Search records": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Get Weather API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Create a page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a page": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "triggerCount": 0,
  "meta": {
    "templateCredsSetupCompleted": true
  }
}
